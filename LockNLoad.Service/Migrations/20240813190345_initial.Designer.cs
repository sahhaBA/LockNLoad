// <auto-generated />
using System;
using LockNLoad.Service.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LockNLoad.Service.Migrations
{
    [DbContext(typeof(LockNLoadContext))]
    [Migration("20240813190345_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LockNLoad.Service.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingGroundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingGroundId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AmmoPricePerUnit")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentImageUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("PricePerUnit")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("RecordDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RejectedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.TrainingGround", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LocationImageUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TrainingGrounds");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Salt")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4CB91BF9B")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAppointments");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserAppointmentEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmmoQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserAppointmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UserAppointmentId");

                    b.ToTable("UserAppointmentEquipment", (string)null);
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Appointment", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.TrainingGround", "TrainingGround")
                        .WithMany("Appointments")
                        .HasForeignKey("TrainingGroundId")
                        .HasConstraintName("FK_Appointments_TrainingGroundId");

                    b.Navigation("TrainingGround");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Bill", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Request", "Request")
                        .WithMany("Bills")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_Bills_RequestId");

                    b.HasOne("LockNLoad.Service.Entities.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Bills_UserId");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Equipment", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Category", "Category")
                        .WithMany("Equipment")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Equipment_CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Request", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Review", "Review")
                        .WithMany("Requests")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_Requests_ReviewId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.User", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserAppointment", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Appointment", "Appointment")
                        .WithMany("UserAppointments")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_UserAppointments_AppointmentId");

                    b.HasOne("LockNLoad.Service.Entities.Request", "Request")
                        .WithMany("UserAppointments")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_UserAppointments_RequestId");

                    b.HasOne("LockNLoad.Service.Entities.User", "User")
                        .WithMany("UserAppointments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAppointments_UserId");

                    b.Navigation("Appointment");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserAppointmentEquipment", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Equipment", "Equipment")
                        .WithMany("UserAppointmentEquipments")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_UserAppointmentEquipment_EquipmentId");

                    b.HasOne("LockNLoad.Service.Entities.UserAppointment", "UserAppointment")
                        .WithMany("UserAppointmentEquipments")
                        .HasForeignKey("UserAppointmentId")
                        .HasConstraintName("FK_UserAppointmentEquipment_UserAppointmentId");

                    b.Navigation("Equipment");

                    b.Navigation("UserAppointment");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserRole", b =>
                {
                    b.HasOne("LockNLoad.Service.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_RoleId");

                    b.HasOne("LockNLoad.Service.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Appointment", b =>
                {
                    b.Navigation("UserAppointments");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Category", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Equipment", b =>
                {
                    b.Navigation("UserAppointmentEquipments");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Request", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("UserAppointments");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Review", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.TrainingGround", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("UserAppointments");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LockNLoad.Service.Entities.UserAppointment", b =>
                {
                    b.Navigation("UserAppointmentEquipments");
                });
#pragma warning restore 612, 618
        }
    }
}
